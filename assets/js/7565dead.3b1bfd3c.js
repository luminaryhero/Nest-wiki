"use strict";(self.webpackChunknest_wiki=self.webpackChunknest_wiki||[]).push([[2392],{1320:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/02","metadata":{"permalink":"/nest-wiki/blog/02","source":"@site/blog/02.md","title":"\u6570\u636e\u5e93\u6a21\u5757(\u4e8c)","description":"\u5b89\u88c5","date":"2023-12-25T14:15:53.000Z","formattedDate":"December 25, 2023","tags":[],"readingTime":1.48,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"\u6570\u636e\u5e93\u6a21\u5757(\u4e8c)"},"unlisted":false,"nextItem":{"title":"\u521b\u5efa\u9879\u76ee(\u4e00)","permalink":"/nest-wiki/blog/01"}},"content":"## \u5b89\u88c5\\n\\n```bash\\n$ pnpm add @nestjs/typeorm typeorm mysql2\\n```\\n\\n## \u6570\u636e\u5e93\u6a21\u5757\\n\\n```bash\\n$ nest g mo databases\\n```\\n\\n> databases.module.ts\\n\\n```ts\\nimport { Global, Module } from \\"@nestjs/common\\";\\nimport { TypeOrmModule } from \\"@nestjs/typeorm\\";\\n\\n@Global()\\n@Module({\\n  imports: [\\n    TypeOrmModule.forRoot({\\n      type: \\"mysql\\",\\n      host: \\"localhost\\",\\n      port: 3306,\\n      username: \\"root\\",\\n      password: \\"12345678\\",\\n      database: \\"test\\",\\n      autoLoadEntities: true,\\n      synchronize: true,\\n    }),\\n  ],\\n  controllers: [],\\n  providers: [],\\n  exports: [],\\n})\\nexport class DatabasesModule {}\\n```\\n\\n> dtos/pagination.dto.ts\\n\\n```ts\\nexport class PagintionDto {\\n  /**\\n   * \u6bcf\u9875\u6761\u6570\\n   */\\n  limit?: number;\\n  /**\\n   * \u5f53\u524d\u9875\u6570\\n   */\\n  page?: number;\\n}\\n```\\n\\n## User \u6a21\u5757\\n\\n```ts\\n@Module({\\n  imports: [TypeOrmModule.forFeature([User])],\\n  controllers: [UsersController],\\n  providers: [UsersService],\\n})\\nexport class UsersModule {}\\n```\\n\\n### \u6a21\u578b\\n\\n> user.entity.ts\\n\\n```ts\\nimport { Entity, Column, PrimaryGeneratedColumn } from \\"typeorm\\";\\n\\n@Entity()\\nexport class User {\\n  @PrimaryGeneratedColumn()\\n  id: number;\\n\\n  @Column()\\n  firstName: string;\\n\\n  @Column()\\n  lastName: string;\\n\\n  @Column({ default: true })\\n  isActive: boolean;\\n}\\n```\\n\\n> create-user.dto.ts\\n\\n```ts\\nexport class CreateUserDto {\\n  firstName: string;\\n\\n  lastName: string;\\n\\n  isActive?: boolean;\\n}\\n```\\n\\n### \u63a7\u5236\u5668\\n\\n> users.controller.ts\\n\\n```ts\\n@Get()\\nfindAll(@Query() pagintionDto: PagintionDto) {\\n  return this.usersService.findAll(pagintionDto);\\n}\\n```\\n\\n### \u670d\u52a1\u7c7b\\n\\n> users.service.ts\\n\\n```ts\\n@Injectable()\\nexport class UsersService {\\n  constructor(\\n    @InjectRepository(User) private usersRepository: Repository<User>\\n  ) {}\\n\\n  async create(createUserDto: CreateUserDto) {\\n    const item = await this.usersRepository.save(createUserDto);\\n    return item;\\n  }\\n\\n  async findAll(pagintionDto: PagintionDto) {\\n    const { limit = 10, page = 1 } = pagintionDto;\\n    return this.usersRepository.find({\\n      skip: (page - 1) * limit,\\n      take: limit,\\n    });\\n  }\\n\\n  async findOne(id: number) {\\n    const item = await this.usersRepository.findOneOrFail({ where: { id } });\\n    if (!item) {\\n      throw new EntityNotFoundError(User, `User entity not found,id is ${id}`);\\n    }\\n    return item;\\n  }\\n\\n  async update(id: number, updateUserDto: UpdateUserDto) {\\n    await this.usersRepository.update(id, updateUserDto);\\n    return this.findOne(id);\\n  }\\n\\n  async remove(id: number) {\\n    const item = await this.findOne(id);\\n    return this.usersRepository.remove(item);\\n  }\\n}\\n```"},{"id":"/01","metadata":{"permalink":"/nest-wiki/blog/01","source":"@site/blog/01.md","title":"\u521b\u5efa\u9879\u76ee(\u4e00)","description":"NestCLI","date":"2023-12-25T00:00:00.000Z","formattedDate":"December 25, 2023","tags":[],"readingTime":0.935,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"\u521b\u5efa\u9879\u76ee(\u4e00)","date":"2023-12-25T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"\u6570\u636e\u5e93\u6a21\u5757(\u4e8c)","permalink":"/nest-wiki/blog/02"}},"content":"## NestCLI\\n\\n```bash\\n$ npm i -g @nestjs/cli\\n```\\n\\n## \u521b\u5efa\u9879\u76ee\\n\\n```bash\\n$ nest new nestjs-restful-template\\n\u26a1  We will scaffold your app in a few seconds..\\n\\n? Which package manager would you \u2764\ufe0f  to use? pnpm\\nCREATE nestjs-restful-template/.eslintrc.js (663 bytes)\\nCREATE nestjs-restful-template/.prettierrc (51 bytes)\\nCREATE nestjs-restful-template/nest-cli.json (171 bytes)\\nCREATE nestjs-restful-template/package.json (1964 bytes)\\nCREATE nestjs-restful-template/README.md (3347 bytes)\\nCREATE nestjs-restful-template/tsconfig.build.json (97 bytes)\\nCREATE nestjs-restful-template/tsconfig.json (546 bytes)\\nCREATE nestjs-restful-template/src/app.controller.spec.ts (617 bytes)\\nCREATE nestjs-restful-template/src/app.controller.ts (274 bytes)\\nCREATE nestjs-restful-template/src/app.module.ts (249 bytes)\\nCREATE nestjs-restful-template/src/app.service.ts (142 bytes)\\nCREATE nestjs-restful-template/src/main.ts (208 bytes)\\nCREATE nestjs-restful-template/test/app.e2e-spec.ts (630 bytes)\\nCREATE nestjs-restful-template/test/jest-e2e.json (183 bytes)\\n\\n\u2714 Installation in progress... \u2615\\n\\n\ud83d\ude80  Successfully created project nestjs-restful-template\\n\ud83d\udc49  Get started with the following commands:\\n\\n$ cd nestjs-restful-template\\n$ pnpm run start\\n```\\n\\n## \u751f\u6210 CRUD\\n\\n```bash\\n$ nest g res users --no-spec\\n? What transport layer do you use? REST API\\n? Would you like to generate CRUD entry points? Yes\\nCREATE src/users/users.controller.ts (894 bytes)\\nCREATE src/users/users.module.ts (248 bytes)\\nCREATE src/users/users.service.ts (609 bytes)\\nCREATE src/users/dto/create-user.dto.ts (30 bytes)\\nCREATE src/users/dto/update-user.dto.ts (169 bytes)\\nCREATE src/users/entities/user.entity.ts (21 bytes)\\nUPDATE package.json (1997 bytes)\\nUPDATE src/app.module.ts (195 bytes)\\n\u2714 Packages installed successfully.\\n```"}]}')}}]);